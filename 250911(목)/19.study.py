# =========================================
# 🔹 오늘 단원 전체 요약
# 1️⃣ 값의 변경 가능성
# - 정수(int), 문자열(str), 튜플(tuple) → 불변(immutable)
# - 리스트(list), 딕셔너리(dict) → 가변(mutable)

# 2️⃣ 변수 복사와 참조
# - x = y → 같은 객체를 참조
# - 리스트는 mutable → 값 변경 시 원본도 바뀜
# - list.copy() → 독립적인 새로운 객체 생성

# 3️⃣ 함수 안에서 값 변경
# - 가변 객체 전달 → 원본 변경 가능
# - 불변 객체 전달 → 변경 불가

# 4️⃣ 리스트 ↔ 튜플 변환
# - tuple(list) → 리스트를 튜플로 변환
# - list(tuple) → 튜플을 리스트로 변환
# - 원본 객체는 그대로, 새로운 객체 생성

# 5️⃣ 셋(Set)
# - 중복 허용 X, 순서 보장 X, 인덱스 사용 불가
# - set(), { }로 생성
# - 값 추가: add(), 삭제: remove(), pop()
# - 집합 연산: 합집합(|, .union()), 교집합(&, .intersection()), 차집합(-, .difference())
# - 리스트 중복 제거 → set(list)

# =========================================
# 🔹 문제 및 실습

# ===============================
# [리스트 & 튜플 복습 문제 5단계]
# ===============================

# 문제 1️⃣ (기초)
# 리스트 list_a = [1,2,3] 에서 첫 번째 원소를 100으로 바꿔보세요.
list_a = [1, 2, 3]
# 여기에 코드 작성

list_a[0] = 100
print(list_a)

print("문제1 결과 =", list_a)


# 문제 2️⃣ (기초-활용)
# 튜플 tuple_a = (10,20,30) 에서 두 번째 값만 출력해보세요.
tuple_a = (10, 20, 30)
# 여기에 코드 작성

print(list(tuple_a)[1])

# 문제 3️⃣ (중간)
# 리스트 복사하기: list_b는 list_a의 복사본이 되도록 만들고,
# list_b[0]을 999로 바꿔도 list_a에는 영향을 주지 않게 해보세요.
list_a = [10, 20, 30]
# 여기에 코드 작성

list_b = list_a.copy()
list_b[0] = 999
print(list_b)
print(list_a)


# 문제 4️⃣ (중간-응용)
# 함수 change(obj)를 만들어, 전달받은 리스트의 첫 번째 원소를 100으로 바꿔보세요.
def change(obj):
    # 여기에 코드 작성
    obj[0] = 100

list_c = [5, 6, 7]
change(list_c)

print(list_c)




# 문제 5️⃣ (심화)
# list_x = [1,2,3], tuple_x = (4,5,6)
# 1) list_x를 튜플로 변환
# 2) tuple_x를 리스트로 변환
# 3) 두 결과를 출력해보세요.
list_x = [1, 2, 3]
tuple_x = (4, 5, 6)
# 여기에 코드 작성
# print("문제5 결과 =", ???)

print(tuple(list_x))
print(list(tuple_x))
